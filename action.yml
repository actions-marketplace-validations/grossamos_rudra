name: 'Rudra for OpenAPI test coverage'
author: 'Amos Gross'
description: 'Openapi based test coverage for integration tests'
branding:
  icon: 'wind'
  color: 'purple'
inputs:
  stage:
    description: 'Preperation or evaluation mode'
    required: true
    default: 'evaluation'
  openapi-source: 
    description: 'Path or URL of openapi file (either json or yaml)'
    required: false
  instance-url: 
    description: 'URL of application that will be tested'
    required: false
  account-for-security: 
    description: 'Take security tags of spec into account and require all 401/403 cases to be tested'
    required: false
  debug:
    description: 'Debugging mode'
    required: false
  test-coverage:
    description: 'Percentage of endpoints that should be covered to pass this stage'
    required: false
  port:
    description: 'Port for rudra to listen on'
    required: false
  services:
    description: 'A mapping for multiple services with different specs and basepaths'
    required: false
runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        if [[ "${{inputs.stage}}" = "preperation" ]]; then 
            docker network create rudra 
            for line in $(docker ps -q); do 
                docker network connect rudra $line; 
            done 
            RUDRA_APP_BASE_URL=${{inputs.instance-url}}
            if [[ "${{inputs.services}}" = "" ]]; then
                if [[ "${{inputs.port}}" = "" ]]; then
                    RUDRA_PORT="-p 13750:13750"
                else
                    RUDRA_PORT="-p ${{inputs.port}}:${{inputs.port}}"
                fi
                RUDRA_MAPPING=""
            else
                RUDRA_PORT="$(echo "${{inputs.services}}" | sed -r 's/([^;]|\\;)*;([^;]|\\;)*; ([0-9]+)\;/-p \3:\3/g' | sed 's/localhost/172.17.0.1/g' | tr '\n' ' ')"
                RUDRA_MAPPING="${{inputs.services}}"
                RUDRA_MAPPING="${RUDRA_MAPPING//$'\n'/RUDRA_LINE_SEPERATOR}"
                RUDRA_MAPPING="${RUDRA_MAPPING//localhost/172.17.0.1'}"
            fi
            docker run --env RUDRA_DEBUG="${{inputs.debug}}" --env RUDRA_APP_BASE_URL="${RUDRA_APP_BASE_URL/localhost/172.17.0.1}" --env RUDRA_OPENAPI_SOURCE="${{inputs.openapi-source}}" --env RUDRA_ACCOUNT_FOR_SECURITY="${{inputs.account-for-security}}" --env RUDRA_TEST_COVERAGE="${{inputs.test-coverage}}" --env RUDRA_PORT="${{inputs.port}}" --volume $PWD:/repo $RUDRA_PORT --env RUDRA_MAPPING="$RUDRA_MAPPING" --network rudra --name rudra -d grossamos/rudra:v0.1.1
            sleep 1
            docker logs rudra
            exit $(docker container inspect --format '{{.State.ExitCode}}' rudra) 
        elif [[ "${{inputs.stage}}" = "evaluation" ]]; then 
            if [[ "${{inputs.openapi-source}}" != "" || "${{inputs.instance-url}}" != "" || "${{inputs.test-coverage}}" != "" || "${{inputs.debug}}" != "" || "${{inputs.account-for-security}}" != "" || "${{inputs.services}}" != "" ]]; then 
                echo "Please configure rudra in the preperation stage and do not add configuration parameters here" 
                exit 1 
            fi 
            docker exec rudra nginx -s stop 
            sleep 1
            docker logs rudra
            exit $(docker container inspect --format '{{.State.ExitCode}}' rudra) 
        else 
            echo "Please provide a stage name of either \"preperation\" or \"evaluation\"" 
            exit 1 
        fi 

